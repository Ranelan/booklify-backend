<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/controller/BookController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/controller/BookController.java" />
              <option name="originalContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.service.BookService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import com.booklify.dto.BookDto;&#10;import com.booklify.repository.RegularUserRepository;&#10;import java.util.stream.Collectors;&#10;&#10;@CrossOrigin(origins = &quot;http://127.0.0.1:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/book&quot;)&#10;public class BookController {&#10;&#10;    @Autowired&#10;    private BookService service;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @PostMapping(value = &quot;/create&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; create(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book book = BookDto.toEntity(bookDto);&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(book::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            book.setImage(imageFile.getBytes());&#10;        }&#10;        Book created = service.save(book);&#10;        return ResponseEntity.ok(BookDto.fromEntity(created));&#10;    }&#10;&#10;    @GetMapping(&quot;/read/{id}&quot;)&#10;    public ResponseEntity&lt;BookDto&gt; read(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(BookDto.fromEntity(book));&#10;    }&#10;&#10;    @PostMapping(value = &quot;/update&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; update(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book book = BookDto.toEntity(bookDto);&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(book::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            book.setImage(imageFile.getBytes());&#10;        }&#10;        Book updated = service.update(book);&#10;        return ResponseEntity.ok(BookDto.fromEntity(updated));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        service.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/getAll&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; getAll() {&#10;        List&lt;Book&gt; books = service.getAll();&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/image/{id}&quot;)&#10;    public ResponseEntity&lt;byte[]&gt; getBookImage(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book != null &amp;&amp; book.getImage() != null) {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.IMAGE_JPEG);&#10;            return new ResponseEntity&lt;&gt;(book.getImage(), headers, HttpStatus.OK);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/search/title&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooks(@RequestParam String query) {&#10;        List&lt;Book&gt; books = service.findByTitleContainingIgnoreCase(query);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/author&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooksByAuthor(@RequestParam String author) {&#10;        List&lt;Book&gt; books = service.findByAuthor(author);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/isbn&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBookByIsbn(@RequestParam String isbn) {&#10;        List&lt;Book&gt; books = service.findByIsbn(isbn);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.service.BookService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import com.booklify.dto.BookDto;&#10;import com.booklify.repository.RegularUserRepository;&#10;import java.util.stream.Collectors;&#10;&#10;@CrossOrigin(origins = &quot;http://127.0.0.1:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/book&quot;)&#10;public class BookController {&#10;&#10;    @Autowired&#10;    private BookService service;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @PostMapping(value = &quot;/create&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; create(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book.Builder builder = new Book.Builder()&#10;                .setBookID(bookDto.getBookID())&#10;                .setIsbn(bookDto.getIsbn())&#10;                .setTitle(bookDto.getTitle())&#10;                .setAuthor(bookDto.getAuthor())&#10;                .setPublisher(bookDto.getPublisher())&#10;                .setCondition(bookDto.getCondition())&#10;                .setPrice(bookDto.getPrice())&#10;                .setDescription(bookDto.getDescription())&#10;                .setUploadedDate(bookDto.getUploadedDate());&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(builder::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            builder.setImage(imageFile.getBytes());&#10;        }&#10;        Book created = service.save(builder.build());&#10;        return ResponseEntity.ok(BookDto.fromEntity(created));&#10;    }&#10;&#10;    @GetMapping(&quot;/read/{id}&quot;)&#10;    public ResponseEntity&lt;BookDto&gt; read(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(BookDto.fromEntity(book));&#10;    }&#10;&#10;    @PostMapping(value = &quot;/update&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; update(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book.Builder builder = new Book.Builder()&#10;                .setBookID(bookDto.getBookID())&#10;                .setIsbn(bookDto.getIsbn())&#10;                .setTitle(bookDto.getTitle())&#10;                .setAuthor(bookDto.getAuthor())&#10;                .setPublisher(bookDto.getPublisher())&#10;                .setCondition(bookDto.getCondition())&#10;                .setPrice(bookDto.getPrice())&#10;                .setDescription(bookDto.getDescription())&#10;                .setUploadedDate(bookDto.getUploadedDate());&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(builder::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            builder.setImage(imageFile.getBytes());&#10;        }&#10;        Book updated = service.update(builder.build());&#10;        return ResponseEntity.ok(BookDto.fromEntity(updated));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        service.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/getAll&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; getAll() {&#10;        List&lt;Book&gt; books = service.getAll();&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/image/{id}&quot;)&#10;    public ResponseEntity&lt;byte[]&gt; getBookImage(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book != null &amp;&amp; book.getImage() != null) {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.IMAGE_JPEG);&#10;            return new ResponseEntity&lt;&gt;(book.getImage(), headers, HttpStatus.OK);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/search/title&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooks(@RequestParam String query) {&#10;        List&lt;Book&gt; books = service.findByTitleContainingIgnoreCase(query);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/author&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooksByAuthor(@RequestParam String author) {&#10;        List&lt;Book&gt; books = service.findByAuthor(author);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/isbn&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBookByIsbn(@RequestParam String isbn) {&#10;        List&lt;Book&gt; books = service.findByIsbn(isbn);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/Address.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/Address.java" />
              <option name="originalContent" value="package com.booklify.domain;&#10;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;public class Address{&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;&#10;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;    protected String unitNumber;&#10;&#10;    @Column(nullable = true)&#10;    protected String street ;&#10;&#10;    @Column(nullable = true)&#10;    protected String suburb;&#10;&#10;    @Column(nullable = false)&#10;    protected String city;&#10;&#10;    @Column(nullable = false)&#10;    protected String province;&#10;&#10;    @Column(nullable = false)&#10;    protected String country ;&#10;&#10;    @Column(nullable = false)&#10;    protected String postalCode;&#10;&#10;    protected Address(){&#10;&#10;    }&#10;&#10;    private Address(Builder builder){&#10;        this.unitNumber = builder.unitNumber;&#10;        this.street = builder.street;&#10;        this.suburb= builder.suburb;&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;    public String getUnitNumber() {&#10;        return unitNumber;&#10;    }&#10;&#10;    public String getStreet() {&#10;        return street;&#10;    }&#10;&#10;    public String getSuburb() {&#10;        return suburb;&#10;    }&#10;&#10;    public String getCity() {&#10;        return city;&#10;    }&#10;&#10;    public String getProvince() {&#10;        return province;&#10;    }&#10;&#10;    public String getCountry() {&#10;        return country;&#10;    }&#10;&#10;    public String getPostalCode() {&#10;        return postalCode;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Address{&quot; +&#10;                &quot;unitNumber='&quot; + unitNumber + '\'' +&#10;                &quot;street='&quot; + street + '\'' +&#10;                &quot;, suburb='&quot; + suburb + '\'' +&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        protected String unitNumber ;&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;        public Builder setUnitNumber(String unitNumber) {&#10;            this.unitNumber = unitNumber;&#10;            return this;&#10;        }&#10;&#10;        public Builder setStreet(String street) {&#10;            this.street = street;&#10;            return this;&#10;        }&#10;        public Builder setSuburb(String suburb) {&#10;            this.suburb = suburb;&#10;            return this;&#10;        }&#10;&#10;        public Builder setCity(String city) {&#10;            this.city = city;&#10;            return this;&#10;        }&#10;&#10;        public Builder setProvince(String province) {&#10;            this.province = province;&#10;            return this;&#10;        }&#10;&#10;        public Builder setPostalCode(String postalCode) {&#10;            this.postalCode = postalCode;&#10;            return this;&#10;        }&#10;&#10;        public Builder setCountry(String country) {&#10;            this.country = country;&#10;            return this;&#10;        }&#10;        public Builder copy(Address address){&#10;            this.unitNumber = address.unitNumber;&#10;            this.street = address.street;&#10;            this.suburb= address.suburb;&#10;            this.city=address.city;&#10;            this.province=address.province;&#10;            this.country=address.country;&#10;            this.postalCode= address.postalCode;&#10;            return this;&#10;&#10;        }&#10;&#10;        public Address build(){return new Address(this);}&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.domain;&#10;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;public class Address{&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    @Column(nullable = true)&#10;    protected Long unitNumber; // Changed from String to Long for auto-increment compatibility&#10;&#10;    @Column(nullable = true)&#10;    protected String street ;&#10;&#10;    @Column(nullable = true)&#10;    protected String suburb;&#10;&#10;    @Column(nullable = false)&#10;    protected String city;&#10;&#10;    @Column(nullable = false)&#10;    protected String province;&#10;&#10;    @Column(nullable = false)&#10;    protected String country ;&#10;&#10;    @Column(nullable = false)&#10;    protected String postalCode;&#10;&#10;    protected Address(){&#10;&#10;    }&#10;&#10;    private Address(Builder builder){&#10;        this.unitNumber = builder.unitNumber;&#10;        this.street = builder.street;&#10;        this.suburb= builder.suburb;&#10;        this.city=builder.city;&#10;        this.province=builder.province;&#10;        this.country=builder.country;&#10;        this.postalCode= builder.postalCode;&#10;&#10;    }&#10;&#10;    public Long getUnitNumber() {&#10;        return unitNumber;&#10;    }&#10;&#10;    public String getStreet() {&#10;        return street;&#10;    }&#10;&#10;    public String getSuburb() {&#10;        return suburb;&#10;    }&#10;&#10;    public String getCity() {&#10;        return city;&#10;    }&#10;&#10;    public String getProvince() {&#10;        return province;&#10;    }&#10;&#10;    public String getCountry() {&#10;        return country;&#10;    }&#10;&#10;    public String getPostalCode() {&#10;        return postalCode;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Address{&quot; +&#10;                &quot;unitNumber='&quot; + unitNumber + '\'' +&#10;                &quot;street='&quot; + street + '\'' +&#10;                &quot;, suburb='&quot; + suburb + '\'' +&#10;                &quot;, province='&quot; + province + '\'' +&#10;                &quot;, city='&quot; + city + '\'' +&#10;                &quot;, Country='&quot; + country + '\'' +&#10;                &quot;, postalCode=&quot; + postalCode +&#10;                '}';&#10;    }&#10;    public static class Builder {&#10;        protected Long unitNumber ; // Changed from String to Long&#10;        protected String street ;&#10;        protected String suburb;&#10;        protected String province;&#10;        protected String city;&#10;        protected String country ;&#10;        protected String postalCode;&#10;&#10;        public Builder setUnitNumber(Long unitNumber) { // Changed parameter type&#10;            this.unitNumber = unitNumber;&#10;            return this;&#10;        }&#10;&#10;        public Builder setStreet(String street) {&#10;            this.street = street;&#10;            return this;&#10;        }&#10;        public Builder setSuburb(String suburb) {&#10;            this.suburb = suburb;&#10;            return this;&#10;        }&#10;&#10;        public Builder setCity(String city) {&#10;            this.city = city;&#10;            return this;&#10;        }&#10;&#10;        public Builder setProvince(String province) {&#10;            this.province = province;&#10;            return this;&#10;        }&#10;&#10;        public Builder setPostalCode(String postalCode) {&#10;            this.postalCode = postalCode;&#10;            return this;&#10;        }&#10;&#10;        public Builder setCountry(String country) {&#10;            this.country = country;&#10;            return this;&#10;        }&#10;        public Builder copy(Address address){&#10;            this.unitNumber = address.unitNumber;&#10;            this.street = address.street;&#10;            this.suburb= address.suburb;&#10;            this.city=address.city;&#10;            this.province=address.province;&#10;            this.country=address.country;&#10;            this.postalCode= address.postalCode;&#10;            return this;&#10;&#10;        }&#10;&#10;        public Address build(){return new Address(this);}&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/Payment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/Payment.java" />
              <option name="originalContent" value="package com.booklify.domain;&#10;&#10;" />
              <option name="updatedContent" value="package com.booklify.domain;&#10;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.GeneratedValue;&#10;import jakarta.persistence.GenerationType;&#10;import jakarta.persistence.Id;&#10;&#10;@Entity&#10;public class Payment {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Add other fields as needed&#10;&#10;    public Payment() {}&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/RegularUser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/RegularUser.java" />
              <option name="originalContent" value="package com.booklify.domain;&#10;&#10;import jakarta.persistence.DiscriminatorValue;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.Lob;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@DiscriminatorValue(&quot;RegularUser&quot;)&#10;public class RegularUser extends User{&#10;    @Column(nullable = true)&#10;    private Double sellerRating = 0.0;&#10;&#10;    @Lob&#10;    @Column(nullable = true)&#10;    private String bio;&#10;&#10;    @Column(nullable = true)&#10;    private LocalDateTime lastLogin;&#10;&#10;    public RegularUser() {&#10;        super();&#10;    }&#10;&#10;    public RegularUser(Long id, String fullName, String email, String password, LocalDateTime dateJoined,&#10;                       Double sellerRating, String bio, LocalDateTime lastLogin) {&#10;        super(id, fullName, email, password, dateJoined);&#10;        this.sellerRating = sellerRating;&#10;        this.bio = bio;&#10;        this.lastLogin = lastLogin;&#10;    }&#10;&#10;    public RegularUser(RegularUserBuilder regularUserBuilder) {&#10;        this.id = regularUserBuilder.id;&#10;        this.fullName = regularUserBuilder.fullName;&#10;        this.email = regularUserBuilder.email;&#10;        this.password = regularUserBuilder.password;&#10;        this.dateJoined = regularUserBuilder.dateJoined;&#10;        this.sellerRating = regularUserBuilder.sellerRating;&#10;        this.bio = regularUserBuilder.bio;&#10;        this.lastLogin = regularUserBuilder.lastLogin;&#10;    }&#10;&#10;    public double getSellerRating() {&#10;        return sellerRating;&#10;    }&#10;&#10;    public String getBio() {&#10;        return bio;&#10;    }&#10;&#10;    public LocalDateTime getLastLogin() {&#10;        return lastLogin;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;RegularUser{&quot; +&#10;                &quot;, id=&quot; + id +&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, password='&quot; + password + '\'' +&#10;                &quot;, dateJoined=&quot; + dateJoined +&#10;                &quot;sellerRating=&quot; + sellerRating +&#10;                &quot;, bio='&quot; + bio + '\'' +&#10;                &quot;, lastLogin=&quot; + lastLogin +&#10;                '}';&#10;    }&#10;&#10;    public static class RegularUserBuilder {&#10;        private Long id;&#10;        private String fullName;&#10;        private String email;&#10;        private String password;&#10;        private LocalDateTime dateJoined;&#10;        private Double sellerRating = 0.0;&#10;        private String bio;&#10;        private LocalDateTime lastLogin;&#10;&#10;        public RegularUserBuilder setId(Long id) {&#10;            this.id = id;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setFullName(String fullName) {&#10;            this.fullName = fullName;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setEmail(String email) {&#10;            this.email = email;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setPassword(String password) {&#10;            this.password = password;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setDateJoined(LocalDateTime dateJoined) {&#10;            this.dateJoined = dateJoined;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setSellerRating(Double sellerRating) {&#10;            this.sellerRating = sellerRating;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setBio(String bio) {&#10;            this.bio = bio;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setLastLogin(LocalDateTime lastLogin) {&#10;            this.lastLogin = lastLogin;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder copy(RegularUser regularUser) {&#10;            this.id = regularUser.id;&#10;            this.fullName = regularUser.fullName;&#10;            this.email = regularUser.email;&#10;            this.password = regularUser.password;&#10;            this.dateJoined = regularUser.dateJoined;&#10;            this.sellerRating = regularUser.sellerRating;&#10;            this.bio = regularUser.bio;&#10;            this.lastLogin = regularUser.lastLogin;&#10;            return this;&#10;        }&#10;&#10;&#10;&#10;        public RegularUser build() {&#10;            return new RegularUser(this);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.domain;&#13;&#10;&#13;&#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&#13;&#10;import jakarta.persistence.Column;&#13;&#10;import jakarta.persistence.DiscriminatorValue;&#13;&#10;import jakarta.persistence.Entity;&#13;&#10;import jakarta.persistence.Lob;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@DiscriminatorValue(&quot;RegularUser&quot;)&#13;&#10;@JsonIgnoreProperties({&quot;hibernateLazyInitializer&quot;, &quot;handler&quot;})&#13;&#10;public class RegularUser extends User{&#13;&#10;&#13;&#10;    @Column(nullable = true)&#13;&#10;    private Double sellerRating = 0.0;&#13;&#10;&#13;&#10;    @Lob&#13;&#10;    @Column(nullable = true)&#13;&#10;    private String bio;&#13;&#10;&#13;&#10;    @Column(nullable = true)&#13;&#10;    private LocalDateTime lastLogin;&#13;&#10;&#13;&#10;    public RegularUser() {&#13;&#10;        super();&#13;&#10;    }&#13;&#10;&#13;&#10;    public RegularUser(Long id, String fullName, String email, String password, LocalDateTime dateJoined,&#13;&#10;                       Double sellerRating, String bio, LocalDateTime lastLogin) {&#13;&#10;        super(id, fullName, email, password, dateJoined);&#13;&#10;        this.sellerRating = sellerRating;&#13;&#10;        this.bio = bio;&#13;&#10;        this.lastLogin = lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    public RegularUser(RegularUserBuilder regularUserBuilder) {&#13;&#10;        this.id = regularUserBuilder.id;&#13;&#10;        this.fullName = regularUserBuilder.fullName;&#13;&#10;        this.email = regularUserBuilder.email;&#13;&#10;        this.password = regularUserBuilder.password;&#13;&#10;        this.dateJoined = regularUserBuilder.dateJoined;&#13;&#10;        this.sellerRating = regularUserBuilder.sellerRating;&#13;&#10;        this.bio = regularUserBuilder.bio;&#13;&#10;        this.lastLogin = regularUserBuilder.lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getSellerRating() {&#13;&#10;        return sellerRating;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getBio() {&#13;&#10;        return bio;&#13;&#10;    }&#13;&#10;&#13;&#10;    public LocalDateTime getLastLogin() {&#13;&#10;        return lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;RegularUser{&quot; +&#13;&#10;                &quot;, id=&quot; + id +&#13;&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#13;&#10;                &quot;, email='&quot; + email + '\'' +&#13;&#10;                &quot;, password='&quot; + password + '\'' +&#13;&#10;                &quot;, dateJoined=&quot; + dateJoined +&#13;&#10;                &quot;sellerRating=&quot; + sellerRating +&#13;&#10;                &quot;, bio='&quot; + bio + '\'' +&#13;&#10;                &quot;, lastLogin=&quot; + lastLogin +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class RegularUserBuilder {&#13;&#10;        private Long id;&#13;&#10;        private String fullName;&#13;&#10;        private String email;&#13;&#10;        private String password;&#13;&#10;        private LocalDateTime dateJoined;&#13;&#10;        private Double sellerRating = 0.0;&#13;&#10;        private String bio;&#13;&#10;        private LocalDateTime lastLogin;&#13;&#10;&#13;&#10;        public RegularUserBuilder setId(Long id) {&#13;&#10;            this.id = id;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setFullName(String fullName) {&#13;&#10;            this.fullName = fullName;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setEmail(String email) {&#13;&#10;            this.email = email;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setPassword(String password) {&#13;&#10;            this.password = password;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setDateJoined(LocalDateTime dateJoined) {&#13;&#10;            this.dateJoined = dateJoined;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setSellerRating(Double sellerRating) {&#13;&#10;            this.sellerRating = sellerRating;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setBio(String bio) {&#13;&#10;            this.bio = bio;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setLastLogin(LocalDateTime lastLogin) {&#13;&#10;            this.lastLogin = lastLogin;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder copy(RegularUser regularUser) {&#13;&#10;            this.id = regularUser.id;&#13;&#10;            this.fullName = regularUser.fullName;&#13;&#10;            this.email = regularUser.email;&#13;&#10;            this.password = regularUser.password;&#13;&#10;            this.dateJoined = regularUser.dateJoined;&#13;&#10;            this.sellerRating = regularUser.sellerRating;&#13;&#10;            this.bio = regularUser.bio;&#13;&#10;            this.lastLogin = regularUser.lastLogin;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;        public RegularUser build() {&#13;&#10;            return new RegularUser(this);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/factory/AddressFactory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/factory/AddressFactory.java" />
              <option name="originalContent" value="package com.booklify.factory;&#10;&#10;import com.booklify.domain.Address;&#10;&#10;public class AddressFactory {&#10;    public static Address createAddress(String unitNumber ,String street,String suburb,String city,String province,String country,String postalCode){&#10;&#10;        if(unitNumber == null ){&#10;            return null;&#10;        }&#10;&#10;        if(street == null||street.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(suburb == null||suburb.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(province== null||province.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(country == null||country.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(city == null||city.isEmpty() ){&#10;            return null;&#10;        }&#10;        if (postalCode == null) {&#10;            return null;&#10;        }&#10;        return new Address.Builder()&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setUnitNumber(unitNumber)&#10;                .setStreet(street)&#10;                .setSuburb(suburb)&#10;                .setCity(city)&#10;                .setProvince(province)&#10;                .setPostalCode(postalCode)&#10;                .setCountry(country)&#10;                .build();&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.factory;&#10;&#10;import com.booklify.domain.Address;&#10;&#10;public class AddressFactory {&#10;    public static Address createAddress(String unitNumber ,String street,String suburb,String city,String province,String country,String postalCode){&#10;&#10;        if(unitNumber == null ){&#10;            return null;&#10;        }&#10;&#10;        if(street == null||street.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(suburb == null||suburb.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(province== null||province.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(country == null||country.isEmpty() ){&#10;            return null;&#10;        }&#10;        if(city == null||city.isEmpty() ){&#10;            return null;&#10;        }&#10;        if (postalCode == null) {&#10;            return null;&#10;        }&#10;        return new Address.Builder()&#10;                .setStreet(street)&#10;                .setSuburb(suburb)&#10;                .setCity(city)&#10;                .setProvince(province)&#10;                .setPostalCode(postalCode)&#10;                .setCountry(country)&#10;                .build();&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/BookRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/BookRepository.java" />
              <option name="originalContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.enums.BookCondition;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface BookRepository extends JpaRepository&lt;Book, Long&gt; {&#10;&#10;&#10;    List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#10;&#10;    List&lt;Book&gt; findByAuthor(String author);&#10;&#10;    List&lt;Book&gt; findByCondition(BookCondition condition);&#10;&#10;    List&lt;Book&gt; findByPriceLessThanEqual(Double maxPrice);&#10;&#10;    Optional&lt;Book&gt; findByIsbn(String isbn);&#10;&#10;//    List&lt;Book&gt; findBySeller_Id(Long sellerId);&#10;&#10;    @Query(&quot;SELECT b FROM Book b WHERE b.price &gt; :minPrice AND b.condition = :condition&quot;)&#10;    List&lt;Book&gt; findBooksByMinPriceAndCondition(@Param(&quot;minPrice&quot;) Double minPrice, @Param(&quot;condition&quot;) BookCondition condition);&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.booklify.repository;&#13;&#10;&#13;&#10;import com.booklify.domain.Book;&#13;&#10;import com.booklify.domain.enums.BookCondition;&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#13;&#10;import org.springframework.data.jpa.repository.Query;&#13;&#10;import org.springframework.data.repository.query.Param;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface BookRepository extends JpaRepository&lt;Book, Long&gt; {&#13;&#10;&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByAuthor(String author);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByCondition(BookCondition condition);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByPriceLessThanEqual(Double maxPrice);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByIsbn(String isbn);&#13;&#10;&#13;&#10;//    List&lt;Book&gt; findBySeller_Id(Long sellerId);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT b FROM Book b WHERE b.price &gt; :minPrice AND b.condition = :condition&quot;)&#13;&#10;    List&lt;Book&gt; findBooksByMinPriceAndCondition(@Param(&quot;minPrice&quot;) Double minPrice, @Param(&quot;condition&quot;) BookCondition condition);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/PaymentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/PaymentRepository.java" />
              <option name="originalContent" value="package com.booklify.repository;&#10;&#10;public class PaymentRepository {&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.repository;&#13;&#10;&#13;&#10;import com.booklify.domain.Payment;&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface PaymentRepository extends JpaRepository&lt;Payment, Long&gt; {&#13;&#10;    // Add custom queries if needed&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/ReviewRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/ReviewRepository.java" />
              <option name="originalContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.repository;&#10;&#10;import com.booklify.domain.Review;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ReviewRepository extends JpaRepository&lt;Review, Long&gt; {&#10;    List&lt;Review&gt; findByBookBookID(Long bookId);&#10;    List&lt;Review&gt; findByUserUserID(Long userId);&#10;}&#10;" />
              <option name="updatedContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.repository;&#10;&#10;import com.booklify.domain.Review;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ReviewRepository extends JpaRepository&lt;Review, Long&gt; {&#10;    List&lt;Review&gt; findByBookBookID(Long bookId);&#10;    List&lt;Review&gt; findByUserId(Long id);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/TransactionRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/TransactionRepository.java" />
              <option name="originalContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt; {&#10;&#10;    List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus);&#10;    List&lt;Transaction&gt; findByOrder_OrderId(Long orderId);&#10;    List&lt;Transaction&gt; findByPayment_Id(Long id);&#10;    List&lt;Transaction&gt; findByRegularUser(Long id);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt; {&#10;&#10;    List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus);&#10;    List&lt;Transaction&gt; findByOrder_OrderId(Long orderId);&#10;    List&lt;Transaction&gt; findByPayment_Id(Long id);&#10;    List&lt;Transaction&gt; findByRegularUser_Id(Long id);&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/IBookService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/IBookService.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface IBookService extends IService&lt;Book, Long&gt;{&#10;      List&lt;Book&gt; getAll();&#10;      void deleteAll();&#10;      Optional&lt;Book&gt; findByIsbn(String isbn);&#10;      List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#10;      List&lt;Book&gt; findByAuthor(String author);&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#13;&#10;&#13;&#10;import com.booklify.domain.Book;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IBookService extends IService&lt;Book, Long&gt;{&#13;&#10;      List&lt;Book&gt; getAll();&#13;&#10;      void deleteAll();&#13;&#10;      List&lt;Book&gt; findByIsbn(String isbn);&#13;&#10;      List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#13;&#10;      List&lt;Book&gt; findByAuthor(String author);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/ReviewService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/ReviewService.java" />
              <option name="originalContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.service;&#10;&#10;import com.booklify.domain.Review;&#10;import com.booklify.repository.ReviewRepository;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ReviewService {&#10;&#10;    private final ReviewRepository reviewRepository;&#10;&#10;    public ReviewService(ReviewRepository reviewRepository) {&#10;        this.reviewRepository = reviewRepository;&#10;    }&#10;&#10;    public Review create(Review review) {&#10;        if (review.getUser() == null || review.getBook() == null) {&#10;            throw new IllegalArgumentException(&quot;Review must be linked to both a User and a Book.&quot;);&#10;        }&#10;        return reviewRepository.save(review);&#10;    }&#10;&#10;    public Optional&lt;Review&gt; read(Long id) {&#10;        return reviewRepository.findById(id);&#10;    }&#10;&#10;    public Review update(Review review) {&#10;        if (review.getReviewId() == null || !reviewRepository.existsById(review.getReviewId())) {&#10;            return null; // or throw an exception&#10;        }&#10;        return reviewRepository.save(review);&#10;    }&#10;&#10;    public boolean delete(Long id) {&#10;        if (reviewRepository.existsById(id)) {&#10;            reviewRepository.deleteById(id);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public List&lt;Review&gt; getAll() {&#10;        return reviewRepository.findAll();&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviewsByBook(Long bookId) {&#10;        return reviewRepository.findByBookBookID(bookId);&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviewsByUser(Long userId) {&#10;        return reviewRepository.findByUserUserID(userId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.service;&#10;&#10;import com.booklify.domain.Review;&#10;import com.booklify.repository.ReviewRepository;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ReviewService {&#10;&#10;    private final ReviewRepository reviewRepository;&#10;&#10;    public ReviewService(ReviewRepository reviewRepository) {&#10;        this.reviewRepository = reviewRepository;&#10;    }&#10;&#10;    public Review create(Review review) {&#10;        if (review.getUser() == null || review.getBook() == null) {&#10;            throw new IllegalArgumentException(&quot;Review must be linked to both a User and a Book.&quot;);&#10;        }&#10;        return reviewRepository.save(review);&#10;    }&#10;&#10;    public Optional&lt;Review&gt; read(Long id) {&#10;        return reviewRepository.findById(id);&#10;    }&#10;&#10;    public Review update(Review review) {&#10;        if (review.getReviewId() == null || !reviewRepository.existsById(review.getReviewId())) {&#10;            return null; // or throw an exception&#10;        }&#10;        return reviewRepository.save(review);&#10;    }&#10;&#10;    public boolean delete(Long id) {&#10;        if (reviewRepository.existsById(id)) {&#10;            reviewRepository.deleteById(id);&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;&#10;    public List&lt;Review&gt; getAll() {&#10;        return reviewRepository.findAll();&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviewsByBook(Long bookId) {&#10;        return reviewRepository.findByBookBookID(bookId);&#10;    }&#10;&#10;    public List&lt;Review&gt; getReviewsByUser(Long userId) {&#10;        return reviewRepository.findByUserId(userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/TransactionService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/TransactionService.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.PaymentRepository;&#10;import com.booklify.repository.TransactionRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class TransactionService implements ITransactionService {&#10;    @Autowired&#10;    private static ITransactionService transactionService;&#10;&#10;    @Autowired&#10;    private TransactionRepository transactionRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private PaymentRepository paymentRepository;&#10;&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus) {&#10;        return transactionRepository.findByTransactionStatus(transactionStatus);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByOrder(Long orderId) {&#10;        return transactionRepository.findByOrder_OrderId(orderId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByPayment(Long paymentId) {&#10;        return transactionRepository.findByPayment_Id(paymentId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByRegularUser(Long id) {&#10;        return transactionRepository.findByRegularUser(id);&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    public Transaction save(Transaction entity) {&#10;        return this.transactionRepository.save(entity);&#10;    }&#10;&#10;    @Override&#10;    public Transaction findById(Long aLong) {&#10;        return this.transactionRepository.findById(aLong).orElse(null);&#10;    }&#10;&#10;    @Override&#10;    public Transaction update(Transaction entity) {&#10;        return this.transactionRepository.save(entity);&#10;&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean deleteById(Long aLong) {&#10;        this.transactionRepository.deleteById(aLong);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; getAll() {&#10;        return transactionRepository.findAll();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.PaymentRepository;&#10;import com.booklify.repository.TransactionRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;public class TransactionService implements ITransactionService {&#10;    @Autowired&#10;    private static ITransactionService transactionService;&#10;&#10;    @Autowired&#10;    private TransactionRepository transactionRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private PaymentRepository paymentRepository;&#10;&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus) {&#10;        return transactionRepository.findByTransactionStatus(transactionStatus);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByOrder(Long orderId) {&#10;        return transactionRepository.findByOrder_OrderId(orderId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByPayment(Long paymentId) {&#10;        return transactionRepository.findByPayment_Id(paymentId);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; findByRegularUser(Long id) {&#10;        return transactionRepository.findByRegularUser_Id(id);&#10;    }&#10;&#10;&#10;&#10;    @Override&#10;    public Transaction save(Transaction entity) {&#10;        return this.transactionRepository.save(entity);&#10;    }&#10;&#10;    @Override&#10;    public Transaction findById(Long aLong) {&#10;        return this.transactionRepository.findById(aLong).orElse(null);&#10;    }&#10;&#10;    @Override&#10;    public Transaction update(Transaction entity) {&#10;        return this.transactionRepository.save(entity);&#10;&#10;&#10;    }&#10;&#10;    @Override&#10;    public boolean deleteById(Long aLong) {&#10;        this.transactionRepository.deleteById(aLong);&#10;        return true;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Transaction&gt; getAll() {&#10;        return transactionRepository.findAll();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/controller/BookControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/controller/BookControllerTest.java" />
              <option name="originalContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.dto.BookDto;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.client.TestRestTemplate;&#10;import org.springframework.core.io.ClassPathResource;&#10;import org.springframework.http.*;&#10;import org.springframework.util.LinkedMultiValueMap;&#10;import org.springframework.util.MultiValueMap;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;&#10;import java.io.IOException;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookControllerTest {&#10;&#10;    @Autowired&#10;    private TestRestTemplate restTemplate;&#10;&#10;    static String testEmail = &quot;testuser_&quot; + System.currentTimeMillis() + &quot;@example.com&quot;;&#10;    static BookDto book1;&#10;    static BookDto book2;&#10;    static com.booklify.domain.RegularUser user;&#10;&#10;    static final String BASE_URL = &quot;/api/book&quot;;&#10;&#10;    private static class LoginRequest {&#10;        private String email;&#10;        private String password;&#10;&#10;        public LoginRequest(String email, String password) {&#10;            this.email = email;&#10;            this.password = password;&#10;        }&#10;&#10;        // Getters (needed for JSON serialization)&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;    }&#10;&#10;    private static class AuthResponse {&#10;        private String token;&#10;        private Object user; // Add this to match backend LoginResponse&#10;&#10;        public String getToken() { return token; }&#10;        public void setToken(String token) { this.token = token; }&#10;        public Object getUser() { return user; }&#10;        public void setUser(Object user) { this.user = user; }&#10;&#10;        @Override&#10;        public String toString() {&#10;            return &quot;AuthResponse{&quot; +&#10;                    &quot;token='&quot; + token + '\'' +&#10;                    &quot;, user=&quot; + user +&#10;                    '}';&#10;        }&#10;    }&#10;&#10;    private String getJwtToken() {&#10;        String authUrl = &quot;/api/regular-user/login&quot;;&#10;        LoginRequest request = new LoginRequest(testEmail, &quot;Password123!&quot;);&#10;&#10;        // Print login request&#10;        System.out.println(&quot;[TEST] Login request: email=&quot; + testEmail + &quot;, password=Password123!&quot;);&#10;        ResponseEntity&lt;AuthResponse&gt; response = restTemplate.postForEntity(&#10;                authUrl,&#10;                request,&#10;                AuthResponse.class&#10;        );&#10;        System.out.println(&quot;[TEST] Login response status: &quot; + response.getStatusCode());&#10;        System.out.println(&quot;[TEST] Login response body: &quot; + response.getBody());&#10;&#10;        if (response.getBody() == null || response.getBody().getToken() == null) {&#10;            throw new IllegalStateException(&quot;Login failed: Invalid email or password. Response body was null. Check that the user is registered and the password matches.&quot;);&#10;        }&#10;&#10;        return response.getBody().getToken();&#10;    }&#10;    // ======== END AUTHENTICATION HELPERS ========&#10;&#10;    @BeforeAll&#10;    void setup() {&#10;        // Use a strong password that passes validation&#10;        String rawPassword = &quot;Password123!&quot;;&#10;        com.booklify.dto.RegularUserDto userDto = new com.booklify.dto.RegularUserDto();&#10;        userDto.setFullName(&quot;Test User&quot;);&#10;        userDto.setEmail(testEmail);&#10;        userDto.setPassword(rawPassword);&#10;        userDto.setDateJoined(java.time.LocalDateTime.now());&#10;        userDto.setSellerRating(4.5);&#10;        userDto.setBio(&quot;Test bio&quot;);&#10;        userDto.setLastLogin(java.time.LocalDateTime.now());&#10;&#10;        // Register user via API (use /create and DTO)&#10;        String createUrl = &quot;/api/regular-user/create&quot;;&#10;        ResponseEntity&lt;com.booklify.dto.RegularUserDto&gt; regResponse = restTemplate.postForEntity(createUrl, userDto, com.booklify.dto.RegularUserDto.class);&#10;        System.out.println(&quot;[TEST] User creation response status: &quot; + regResponse.getStatusCode());&#10;        System.out.println(&quot;[TEST] User creation response body: &quot; + regResponse.getBody());&#10;        System.out.println(&quot;[TEST] User creation email: &quot; + userDto.getEmail());&#10;&#10;        // Fetch the persisted user (with ID) from backend&#10;        String getByEmailUrl = &quot;/api/regular-user/getByEmail/&quot; + testEmail;&#10;        ResponseEntity&lt;com.booklify.dto.RegularUserDto&gt; getUserResponse = restTemplate.getForEntity(getByEmailUrl, com.booklify.dto.RegularUserDto.class);&#10;        com.booklify.dto.RegularUserDto persistedUserDto = getUserResponse.getBody();&#10;        if (persistedUserDto == null || persistedUserDto.getId() == null) {&#10;            throw new IllegalStateException(&quot;Failed to fetch persisted user after creation&quot;);&#10;        }&#10;        // Map DTO to entity for BookFactory&#10;        user = new com.booklify.domain.RegularUser.RegularUserBuilder()&#10;                .setId(persistedUserDto.getId())&#10;                .setFullName(persistedUserDto.getFullName())&#10;                .setEmail(persistedUserDto.getEmail())&#10;                .setPassword(persistedUserDto.getPassword())&#10;                .setDateJoined(persistedUserDto.getDateJoined())&#10;                .setSellerRating(persistedUserDto.getSellerRating())&#10;                .setBio(persistedUserDto.getBio())&#10;                .setLastLogin(persistedUserDto.getLastLogin())&#10;                .build();&#10;&#10;        // Now create books with this user&#10;        byte[] testImage = loadTestImage();&#10;        book1 = new BookDto(null, &quot;9780061122415&quot;, &quot;The Alchemist&quot;, &quot;Paulo Coelho&quot;,&#10;                &quot;HarperOne&quot;, BookCondition.EXCELLENT, 180.0,&#10;                &quot;Fiction classic about destiny.&quot;, java.time.LocalDateTime.now(), testImage);&#10;        book1.setUploaderId(user.getId());&#10;        book2 = new BookDto(null, &quot;9780451524935&quot;, &quot;1984&quot;, &quot;George Orwell&quot;,&#10;                &quot;Secker &amp; Warburg&quot;, BookCondition.ACCEPTABLE, 150.0,&#10;                &quot;Dystopian novel set in a totalitarian regime.&quot;, java.time.LocalDateTime.now(), testImage);&#10;        book2.setUploaderId(user.getId());&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void create() throws IOException {&#10;        String url = BASE_URL + &quot;/create&quot;;&#10;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;)); // Add JWT token&#10;&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.postForEntity(url, requestEntity, BookDto.class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertNotNull(response.getBody().getBookID());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        assertEquals(book1.getTitle(), response.getBody().getTitle());&#10;&#10;        // Update book1 with returned BookDto to get its generated ID for further tests&#10;        book1 = response.getBody();&#10;&#10;        System.out.println(&quot;Created book: &quot; + book1);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void read() {&#10;        String url = BASE_URL + &quot;/read/&quot; + book1.getBookID();&#10;&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.getForEntity(url, BookDto.class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(book1.getBookID(), response.getBody().getBookID());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        assertEquals(book1.getTitle(), response.getBody().getTitle());&#10;&#10;        System.out.println(&quot;Read book: &quot; + response.getBody());&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void update() throws IOException {&#10;        String url = BASE_URL + &quot;/update&quot;;&#10;        book1.setTitle(&quot;The Alchemist (Updated)&quot;);&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;));&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.postForEntity(url, requestEntity, BookDto.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(&quot;The Alchemist (Updated)&quot;, response.getBody().getTitle());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        book1 = response.getBody();&#10;        System.out.println(&quot;Updated book: &quot; + book1);&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void getAll() {&#10;        String url = BASE_URL + &quot;/getAll&quot;;&#10;&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.getForEntity(url, Book[].class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;&#10;        System.out.println(&quot;All books:&quot;);&#10;        for (Book b : response.getBody()) {&#10;            System.out.println(b);&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void getBookImage() {&#10;        String url = BASE_URL + &quot;/image/&quot; + book1.getBookID();&#10;&#10;        ResponseEntity&lt;byte[]&gt; response = restTemplate.getForEntity(url, byte[].class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;&#10;        System.out.println(&quot;Image bytes length: &quot; + response.getBody().length);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void delete() {&#10;        String url = BASE_URL + &quot;/delete/&quot; + book1.getBookID();&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;));&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(headers);&#10;        ResponseEntity&lt;Void&gt; deleteResponse = restTemplate.exchange(&#10;                url,&#10;                HttpMethod.DELETE,&#10;                entity,&#10;                Void.class&#10;        );&#10;        assertTrue(&#10;                deleteResponse.getStatusCode() == HttpStatus.NO_CONTENT ||&#10;                        deleteResponse.getStatusCode() == HttpStatus.OK,&#10;                &quot;Delete should return 204 or 200&quot;&#10;        );&#10;        // Try to read again&#10;        ResponseEntity&lt;BookDto&gt; readResponse = restTemplate.exchange(&#10;                BASE_URL + &quot;/read/&quot; + book1.getBookID(),&#10;                HttpMethod.GET,&#10;                entity,&#10;                BookDto.class&#10;        );&#10;        if (readResponse.getStatusCode() == HttpStatus.NOT_FOUND) {&#10;            assertEquals(HttpStatus.NOT_FOUND, readResponse.getStatusCode());&#10;        } else {&#10;            fail(&quot;Expected 404 NOT FOUND after deleting the book, but got: &quot; + readResponse.getStatusCode());&#10;        }&#10;        System.out.println(&quot;Deleted book with ID: &quot; + book1.getBookID());&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        // Save book1 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/isbn?isbn=&quot; + book1.getIsbn();&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, Book[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        assertEquals(book1.getIsbn(), response.getBody()[0].getIsbn());&#10;        System.out.println(&quot;Found by ISBN: &quot; + response.getBody()[0]);&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        // Save book1 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/title?query=alchemist&quot;;&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, Book[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + response.getBody().length);&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void findByAuthor() {&#10;        // Save book2 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book2);&#10;        // Use the correct test image extension&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/author?author=&quot; + book2.getAuthor();&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, Book[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        System.out.println(&quot;Found by author: &quot; + response.getBody().length);&#10;    }&#10;&#10;&#10;    private static byte[] loadTestImage() {&#10;        try {&#10;            ClassPathResource resource = new ClassPathResource(&quot;test-image.jpg&quot;);&#10;            return resource.getInputStream().readAllBytes();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            return new byte[]{1, 2, 3};&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.dto.BookDto;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.client.TestRestTemplate;&#10;import org.springframework.core.io.ClassPathResource;&#10;import org.springframework.http.*;&#10;import org.springframework.util.LinkedMultiValueMap;&#10;import org.springframework.util.MultiValueMap;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;&#10;import java.io.IOException;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookControllerTest {&#10;&#10;    @Autowired&#10;    private TestRestTemplate restTemplate;&#10;&#10;    static String testEmail = &quot;testuser_&quot; + System.currentTimeMillis() + &quot;@example.com&quot;;&#10;    static BookDto book1;&#10;    static BookDto book2;&#10;    static com.booklify.domain.RegularUser user;&#10;&#10;    static final String BASE_URL = &quot;/api/book&quot;;&#10;&#10;    private static class LoginRequest {&#10;        private String email;&#10;        private String password;&#10;&#10;        public LoginRequest(String email, String password) {&#10;            this.email = email;&#10;            this.password = password;&#10;        }&#10;&#10;        // Getters (needed for JSON serialization)&#10;        public String getEmail() { return email; }&#10;        public String getPassword() { return password; }&#10;    }&#10;&#10;    private static class AuthResponse {&#10;        private String token;&#10;        private Object user; // Add this to match backend LoginResponse&#10;&#10;        public String getToken() { return token; }&#10;        public void setToken(String token) { this.token = token; }&#10;        public Object getUser() { return user; }&#10;        public void setUser(Object user) { this.user = user; }&#10;&#10;        @Override&#10;        public String toString() {&#10;            return &quot;AuthResponse{&quot; +&#10;                    &quot;token='&quot; + token + '\'' +&#10;                    &quot;, user=&quot; + user +&#10;                    '}';&#10;        }&#10;    }&#10;&#10;    private String getJwtToken() {&#10;        String authUrl = &quot;/api/regular-user/login&quot;;&#10;        LoginRequest request = new LoginRequest(testEmail, &quot;Password123!&quot;);&#10;&#10;        // Print login request&#10;        System.out.println(&quot;[TEST] Login request: email=&quot; + testEmail + &quot;, password=Password123!&quot;);&#10;        ResponseEntity&lt;AuthResponse&gt; response = restTemplate.postForEntity(&#10;                authUrl,&#10;                request,&#10;                AuthResponse.class&#10;        );&#10;        System.out.println(&quot;[TEST] Login response status: &quot; + response.getStatusCode());&#10;        System.out.println(&quot;[TEST] Login response body: &quot; + response.getBody());&#10;&#10;        if (response.getBody() == null || response.getBody().getToken() == null) {&#10;            throw new IllegalStateException(&quot;Login failed: Invalid email or password. Response body was null. Check that the user is registered and the password matches.&quot;);&#10;        }&#10;&#10;        return response.getBody().getToken();&#10;    }&#10;    // ======== END AUTHENTICATION HELPERS ========&#10;&#10;    @BeforeAll&#10;    void setup() {&#10;        // Use a strong password that passes validation&#10;        String rawPassword = &quot;Password123!&quot;;&#10;        com.booklify.dto.RegularUserDto userDto = new com.booklify.dto.RegularUserDto();&#10;        userDto.setFullName(&quot;Test User&quot;);&#10;        userDto.setEmail(testEmail);&#10;        userDto.setPassword(rawPassword);&#10;        userDto.setDateJoined(java.time.LocalDateTime.now());&#10;        userDto.setSellerRating(4.5);&#10;        userDto.setBio(&quot;Test bio&quot;);&#10;        userDto.setLastLogin(java.time.LocalDateTime.now());&#10;&#10;        // Register user via API (use /create and DTO)&#10;        String createUrl = &quot;/api/regular-user/create&quot;;&#10;        ResponseEntity&lt;com.booklify.dto.RegularUserDto&gt; regResponse = restTemplate.postForEntity(createUrl, userDto, com.booklify.dto.RegularUserDto.class);&#10;        System.out.println(&quot;[TEST] User creation response status: &quot; + regResponse.getStatusCode());&#10;        System.out.println(&quot;[TEST] User creation response body: &quot; + regResponse.getBody());&#10;        System.out.println(&quot;[TEST] User creation email: &quot; + userDto.getEmail());&#10;&#10;        // Fetch the persisted user (with ID) from backend&#10;        String getByEmailUrl = &quot;/api/regular-user/getByEmail/&quot; + testEmail;&#10;        ResponseEntity&lt;com.booklify.dto.RegularUserDto&gt; getUserResponse = restTemplate.getForEntity(getByEmailUrl, com.booklify.dto.RegularUserDto.class);&#10;        com.booklify.dto.RegularUserDto persistedUserDto = getUserResponse.getBody();&#10;        if (persistedUserDto == null || persistedUserDto.getId() == null) {&#10;            throw new IllegalStateException(&quot;Failed to fetch persisted user after creation&quot;);&#10;        }&#10;        // Map DTO to entity for BookFactory&#10;        user = new com.booklify.domain.RegularUser.RegularUserBuilder()&#10;                .setId(persistedUserDto.getId())&#10;                .setFullName(persistedUserDto.getFullName())&#10;                .setEmail(persistedUserDto.getEmail())&#10;                .setPassword(persistedUserDto.getPassword())&#10;                .setDateJoined(persistedUserDto.getDateJoined())&#10;                .setSellerRating(persistedUserDto.getSellerRating())&#10;                .setBio(persistedUserDto.getBio())&#10;                .setLastLogin(persistedUserDto.getLastLogin())&#10;                .build();&#10;&#10;        // Now create books with this user&#10;        byte[] testImage = loadTestImage();&#10;        book1 = new BookDto(null, &quot;9780061122415&quot;, &quot;The Alchemist&quot;, &quot;Paulo Coelho&quot;,&#10;                &quot;HarperOne&quot;, BookCondition.EXCELLENT, 180.0,&#10;                &quot;Fiction classic about destiny.&quot;, java.time.LocalDateTime.now(), testImage);&#10;        book1.setUploaderId(user.getId());&#10;        book2 = new BookDto(null, &quot;9780451524935&quot;, &quot;1984&quot;, &quot;George Orwell&quot;,&#10;                &quot;Secker &amp; Warburg&quot;, BookCondition.ACCEPTABLE, 150.0,&#10;                &quot;Dystopian novel set in a totalitarian regime.&quot;, java.time.LocalDateTime.now(), testImage);&#10;        book2.setUploaderId(user.getId());&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void create() throws IOException {&#10;        String url = BASE_URL + &quot;/create&quot;;&#10;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;)); // Add JWT token&#10;&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.postForEntity(url, requestEntity, BookDto.class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertNotNull(response.getBody().getBookID());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        assertEquals(book1.getTitle(), response.getBody().getTitle());&#10;&#10;        // Update book1 with returned BookDto to get its generated ID for further tests&#10;        book1 = response.getBody();&#10;&#10;        System.out.println(&quot;Created book: &quot; + book1);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void read() {&#10;        String url = BASE_URL + &quot;/read/&quot; + book1.getBookID();&#10;&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.getForEntity(url, BookDto.class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(book1.getBookID(), response.getBody().getBookID());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        assertEquals(book1.getTitle(), response.getBody().getTitle());&#10;&#10;        System.out.println(&quot;Read book: &quot; + response.getBody());&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void update() throws IOException {&#10;        String url = BASE_URL + &quot;/update&quot;;&#10;        book1.setTitle(&quot;The Alchemist (Updated)&quot;);&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;));&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        ResponseEntity&lt;BookDto&gt; response = restTemplate.postForEntity(url, requestEntity, BookDto.class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertEquals(&quot;The Alchemist (Updated)&quot;, response.getBody().getTitle());&#10;        assertEquals(book1.getUploaderId(), response.getBody().getUploaderId());&#10;        book1 = response.getBody();&#10;        System.out.println(&quot;Updated book: &quot; + book1);&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void getAll() {&#10;        String url = BASE_URL + &quot;/getAll&quot;;&#10;&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.getForEntity(url, Book[].class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;&#10;        System.out.println(&quot;All books:&quot;);&#10;        for (Book b : response.getBody()) {&#10;            System.out.println(b);&#10;        }&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void getBookImage() {&#10;        String url = BASE_URL + &quot;/image/&quot; + book1.getBookID();&#10;&#10;        ResponseEntity&lt;byte[]&gt; response = restTemplate.getForEntity(url, byte[].class);&#10;&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;&#10;        System.out.println(&quot;Image bytes length: &quot; + response.getBody().length);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void delete() {&#10;        String url = BASE_URL + &quot;/delete/&quot; + book1.getBookID();&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setBearerAuth(getJwtToken().replace(&quot;Bearer &quot;, &quot;&quot;));&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(headers);&#10;        ResponseEntity&lt;Void&gt; deleteResponse = restTemplate.exchange(&#10;                url,&#10;                HttpMethod.DELETE,&#10;                entity,&#10;                Void.class&#10;        );&#10;        assertTrue(&#10;                deleteResponse.getStatusCode() == HttpStatus.NO_CONTENT ||&#10;                        deleteResponse.getStatusCode() == HttpStatus.OK,&#10;                &quot;Delete should return 204 or 200&quot;&#10;        );&#10;        // Try to read again&#10;        ResponseEntity&lt;BookDto&gt; readResponse = restTemplate.exchange(&#10;                BASE_URL + &quot;/read/&quot; + book1.getBookID(),&#10;                HttpMethod.GET,&#10;                entity,&#10;                BookDto.class&#10;        );&#10;        if (readResponse.getStatusCode() == HttpStatus.NOT_FOUND) {&#10;            assertEquals(HttpStatus.NOT_FOUND, readResponse.getStatusCode());&#10;        } else {&#10;            fail(&quot;Expected 404 NOT FOUND after deleting the book, but got: &quot; + readResponse.getStatusCode());&#10;        }&#10;        System.out.println(&quot;Deleted book with ID: &quot; + book1.getBookID());&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        // Save book1 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/isbn?isbn=&quot; + book1.getIsbn();&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, Book[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        assertEquals(book1.getIsbn(), response.getBody()[0].getIsbn());&#10;        System.out.println(&quot;Found by ISBN: &quot; + response.getBody()[0]);&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        // Save book1 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book1);&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/title?query=alchemist&quot;;&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;Book[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, Book[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + response.getBody().length);&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void findByAuthor() {&#10;        // Save book2 first&#10;        String createUrl = BASE_URL + &quot;/create&quot;;&#10;        MultiValueMap&lt;String, Object&gt; body = new LinkedMultiValueMap&lt;&gt;();&#10;        body.add(&quot;bookRequest&quot;, book2);&#10;        // Use the correct test image extension&#10;        body.add(&quot;imageFile&quot;, new ClassPathResource(&quot;test-image.jpg&quot;));&#10;        HttpHeaders headers = new HttpHeaders();&#10;        headers.setContentType(MediaType.MULTIPART_FORM_DATA);&#10;        HttpEntity&lt;MultiValueMap&lt;String, Object&gt;&gt; requestEntity = new HttpEntity&lt;&gt;(body, headers);&#10;        restTemplate.postForEntity(createUrl, requestEntity, Book.class);&#10;&#10;        String url = BASE_URL + &quot;/search/author?author=&quot; + book2.getAuthor();&#10;        // Add JWT token to headers&#10;        String jwt = getJwtToken();&#10;        HttpHeaders authHeaders = new HttpHeaders();&#10;        authHeaders.setBearerAuth(jwt);&#10;        HttpEntity&lt;Void&gt; entity = new HttpEntity&lt;&gt;(authHeaders);&#10;        ResponseEntity&lt;BookDto[]&gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, BookDto[].class);&#10;        assertEquals(HttpStatus.OK, response.getStatusCode());&#10;        assertNotNull(response.getBody());&#10;        assertTrue(response.getBody().length &gt; 0);&#10;        System.out.println(&quot;Found by author: &quot; + response.getBody().length);&#10;    }&#10;&#10;&#10;    private static byte[] loadTestImage() {&#10;        try {&#10;            ClassPathResource resource = new ClassPathResource(&quot;test-image.jpg&quot;);&#10;            return resource.getInputStream().readAllBytes();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            return new byte[]{1, 2, 3};&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/controller/OrderItemControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/controller/OrderItemControllerTest.java" />
              <option name="originalContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.factory.OrderFactory;&#10;import com.booklify.factory.RegularUserFactory;&#10;import com.booklify.repository.BookRepository;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderItemControllerTest {&#10;&#10;    private Order order;&#10;    private OrderItem orderItem;&#10;    private RegularUser regularUser;&#10;    private com.booklify.domain.Book book;&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    @Autowired&#10;    private BookRepository bookRepository;&#10;&#10;    private String getBaseUrl() {&#10;        return &quot;http://localhost:&quot; + port + &quot;/api/orderItems&quot;;&#10;    }&#10;&#10;&#10;&#10;    @BeforeAll&#10;    void setUp() {&#10;        // Use a random email to avoid unique constraint violation&#10;        String randomEmail = &quot;testUser_&quot; + UUID.randomUUID() + &quot;@gmail.com&quot;;&#10;        regularUser = RegularUserFactory.createRegularUser(&quot;Test User&quot;, randomEmail, &quot;password123&quot;, LocalDateTime.now(), 4.5, &quot;Test bio&quot;, LocalDateTime.now());&#10;        regularUser = regularUserRepository.save(regularUser);&#10;&#10;        // Create and save a book for all tests&#10;        book = new com.booklify.domain.Book.Builder()&#10;                .setTitle(&quot;Default Test Book&quot;)&#10;                .setAuthor(&quot;Default Author&quot;)&#10;                .setCondition(com.booklify.domain.enums.BookCondition.EXCELLENT)&#10;                .setPrice(10.0)&#10;                .setDescription(&quot;Default Description&quot;)&#10;                .setIsbn(&quot;0000000000000&quot;)&#10;                .setPublisher(&quot;Default Publisher&quot;)&#10;                .setUploadedDate(LocalDateTime.now())&#10;                .setUser(regularUser)&#10;                .build();&#10;        book = bookRepository.save(book);&#10;&#10;        // Create an order for the user using the builder's public setters&#10;        order = new Order.OrderBuilder()&#10;                .setOrderDate(LocalDateTime.now())&#10;                .setRegularUser(regularUser)&#10;                .build();&#10;        order = orderRepository.save(order); // Save the order to get an ID&#10;        orderItem = new OrderItem();&#10;    }&#10;&#10;    @Test&#10;    void createOrderItem() {&#10;        orderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(2)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;&#10;        OrderItem saved = orderItemRepository.save(orderItem);&#10;        assertNotNull(saved.getOrderItemId(), &quot;OrderItem ID should not be null after save&quot;);&#10;        assertEquals(order.getOrderId(), saved.getOrder().getOrderId(), &quot;OrderItem should be linked to the correct order&quot;);&#10;    }&#10;&#10;    @Test&#10;    void updateOrderItem() {&#10;        orderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(1)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItem = orderItemRepository.save(orderItem);&#10;&#10;        OrderItem updatedOrderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrderItemId(orderItem.getOrderItemId())&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(5)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        OrderItem updated = orderItemRepository.save(updatedOrderItem);&#10;        assertEquals(5, updated.getQuantity(), &quot;OrderItem quantity should be updated&quot;);&#10;    }&#10;&#10;    @Test&#10;    void deleteOrderItem() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(3)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long id = item.getOrderItemId();&#10;        assertNotNull(id);&#10;        orderItemRepository.deleteById(id);&#10;        assertFalse(orderItemRepository.findById(id).isPresent(), &quot;OrderItem should be deleted&quot;);&#10;    }&#10;&#10;    @Test&#10;    void getOrderItemById() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(4)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long id = item.getOrderItemId();&#10;        assertNotNull(id);&#10;        OrderItem found = orderItemRepository.findById(id).orElse(null);&#10;        assertNotNull(found, &quot;OrderItem should be found by ID&quot;);&#10;        assertEquals(4, found.getQuantity());&#10;    }&#10;&#10;    @Test&#10;    void findAllOrderItems() {&#10;        long countBefore = orderItemRepository.count();&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(6)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        Iterable&lt;OrderItem&gt; all = orderItemRepository.findAll();&#10;        assertTrue(all.iterator().hasNext(), &quot;Should find at least one order item&quot;);&#10;        assertTrue(orderItemRepository.count() &gt;= countBefore + 1);&#10;    }&#10;&#10;    @Test&#10;    void findByOrderStatus() {&#10;        // Create and save an order item with a specific status&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(2)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        var found = orderItemRepository.findByOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING);&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by status&quot;);&#10;    }&#10;&#10;    @Test&#10;    void findByOrderId() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(7)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long orderId = order.getOrderId();&#10;        var found = orderItemRepository.findByOrder_OrderId(orderId);&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by order ID&quot;);&#10;    }&#10;    @Test&#10;    void findByBookId() {&#10;        com.booklify.domain.Book testBook = new com.booklify.domain.Book.Builder()&#10;                .setTitle(&quot;Test Book&quot;)&#10;                .setAuthor(&quot;Test Author&quot;)&#10;                .setCondition(com.booklify.domain.enums.BookCondition.EXCELLENT)&#10;                .setPrice(10.0)&#10;                .setDescription(&quot;Test Description&quot;)&#10;                .setIsbn(&quot;1234567890123&quot;)&#10;                .setPublisher(&quot;Test Publisher&quot;)&#10;                .setUploadedDate(LocalDateTime.now())&#10;                .build();&#10;        testBook = bookRepository.save(testBook);&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(testBook)&#10;                .setQuantity(1)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        var found = orderItemRepository.findByBook_BookID(testBook.getBookID());&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by book ID&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.factory.OrderFactory;&#10;import com.booklify.factory.RegularUserFactory;&#10;import com.booklify.repository.BookRepository;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.boot.test.web.server.LocalServerPort;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderItemControllerTest {&#10;&#10;    private Order order;&#10;    private OrderItem orderItem;&#10;    private RegularUser regularUser;&#10;    private com.booklify.domain.Book book;&#10;&#10;    @LocalServerPort&#10;    private int port;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    @Autowired&#10;    private BookRepository bookRepository;&#10;&#10;    private String getBaseUrl() {&#10;        return &quot;http://localhost:&quot; + port + &quot;/api/orderItems&quot;;&#10;    }&#10;&#10;&#10;&#10;    @BeforeAll&#10;    void setUp() {&#10;        // Use a random email to avoid unique constraint violation&#10;        String randomEmail = &quot;testUser_&quot; + UUID.randomUUID() + &quot;@gmail.com&quot;;&#10;        regularUser = RegularUserFactory.createRegularUser(&quot;Test User&quot;, randomEmail, &quot;password123&quot;, LocalDateTime.now(), 4.5, &quot;Test bio&quot;, LocalDateTime.now());&#10;        regularUser = regularUserRepository.save(regularUser);&#10;&#10;        // Create and save a book for all tests&#10;        book = new com.booklify.domain.Book.Builder()&#10;                .setTitle(&quot;Default Test Book&quot;)&#10;                .setAuthor(&quot;Default Author&quot;)&#10;                .setCondition(com.booklify.domain.enums.BookCondition.EXCELLENT)&#10;                .setPrice(10.0)&#10;                .setDescription(&quot;Default Description&quot;)&#10;                .setIsbn(&quot;0000000000000&quot;)&#10;                .setPublisher(&quot;Default Publisher&quot;)&#10;                .setUploadedDate(LocalDateTime.now())&#10;                .setUser(regularUser)&#10;                .build();&#10;        book = bookRepository.save(book);&#10;&#10;        // Create an order for the user using the builder's public setters&#10;        order = new Order.OrderBuilder()&#10;                .setOrderDate(LocalDateTime.now())&#10;                .setRegularUser(regularUser)&#10;                .build();&#10;        order = orderRepository.save(order); // Save the order to get an ID&#10;        orderItem = new OrderItem();&#10;    }&#10;&#10;    @Test&#10;    void createOrderItem() {&#10;        orderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(2)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;&#10;        OrderItem saved = orderItemRepository.save(orderItem);&#10;        assertNotNull(saved.getOrderItemId(), &quot;OrderItem ID should not be null after save&quot;);&#10;        assertEquals(order.getOrderId(), saved.getOrder().getOrderId(), &quot;OrderItem should be linked to the correct order&quot;);&#10;    }&#10;&#10;    @Test&#10;    void updateOrderItem() {&#10;        orderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(1)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItem = orderItemRepository.save(orderItem);&#10;&#10;        OrderItem updatedOrderItem = new OrderItem.OrderItemBuilder()&#10;                .setOrderItemId(orderItem.getOrderItemId())&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(5)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        OrderItem updated = orderItemRepository.save(updatedOrderItem);&#10;        assertEquals(5, updated.getQuantity(), &quot;OrderItem quantity should be updated&quot;);&#10;    }&#10;&#10;    @Test&#10;    void deleteOrderItem() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(3)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long id = item.getOrderItemId();&#10;        assertNotNull(id);&#10;        orderItemRepository.deleteById(id);&#10;        assertFalse(orderItemRepository.findById(id).isPresent(), &quot;OrderItem should be deleted&quot;);&#10;    }&#10;&#10;    @Test&#10;    void getOrderItemById() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(4)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long id = item.getOrderItemId();&#10;        assertNotNull(id);&#10;        OrderItem found = orderItemRepository.findById(id).orElse(null);&#10;        assertNotNull(found, &quot;OrderItem should be found by ID&quot;);&#10;        assertEquals(4, found.getQuantity());&#10;    }&#10;&#10;    @Test&#10;    void findAllOrderItems() {&#10;        long countBefore = orderItemRepository.count();&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(6)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        Iterable&lt;OrderItem&gt; all = orderItemRepository.findAll();&#10;        assertTrue(all.iterator().hasNext(), &quot;Should find at least one order item&quot;);&#10;        assertTrue(orderItemRepository.count() &gt;= countBefore + 1);&#10;    }&#10;&#10;    @Test&#10;    void findByOrderStatus() {&#10;        // Create and save an order item with a specific status&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(2)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        var found = orderItemRepository.findByOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING);&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by status&quot;);&#10;    }&#10;&#10;    @Test&#10;    void findByOrderId() {&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(book)&#10;                .setQuantity(7)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        item = orderItemRepository.save(item);&#10;        Long orderId = order.getOrderId();&#10;        var found = orderItemRepository.findByOrder_OrderId(orderId);&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by order ID&quot;);&#10;    }&#10;    @Test&#10;    void findByBookId() {&#10;        com.booklify.domain.Book testBook = new com.booklify.domain.Book.Builder()&#10;                .setTitle(&quot;Test Book&quot;)&#10;                .setAuthor(&quot;Test Author&quot;)&#10;                .setCondition(com.booklify.domain.enums.BookCondition.EXCELLENT)&#10;                .setPrice(10.0)&#10;                .setDescription(&quot;Test Description&quot;)&#10;                .setIsbn(&quot;1234567890123&quot;)&#10;                .setPublisher(&quot;Test Publisher&quot;)&#10;                .setUploadedDate(LocalDateTime.now())&#10;                .setUser(regularUser) // Ensure user is set&#10;                .build();&#10;        testBook = bookRepository.save(testBook);&#10;        OrderItem item = new OrderItem.OrderItemBuilder()&#10;                .setOrder(order)&#10;                .setBook(testBook)&#10;                .setQuantity(1)&#10;                .setOrderStatus(com.booklify.domain.enums.OrderStatus.PENDING)&#10;                .build();&#10;        orderItemRepository.save(item);&#10;        var found = orderItemRepository.findByBook_BookID(testBook.getBookID());&#10;        assertFalse(found.isEmpty(), &quot;Should find order items by book ID&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/factory/OrderItemFactoryTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/factory/OrderItemFactoryTest.java" />
              <option name="originalContent" value="package com.booklify.factory;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.domain.enums.OrderStatus;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class OrderItemFactoryTest {&#10;&#10;    private int quantity;&#10;    private double totalAmount;&#10;    private OrderStatus orderStatus;&#10;    private Order order;&#10;    private Book book;&#10;    private byte[] image;&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;        RegularUser regularUser = new RegularUserFactory().createRegularUser(&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;                image&#10;" />
              <option name="updatedContent" value="package com.booklify.factory;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.domain.enums.OrderStatus;&#10;import org.junit.jupiter.api.BeforeEach;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class OrderItemFactoryTest {&#10;&#10;    private int quantity;&#10;    private double totalAmount;&#10;    private OrderStatus orderStatus;&#10;    private Order order;&#10;    private Book book;&#10;    private byte[] image;&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {  // Initialize the test data&#10;        // Create a sample book&#10;&#10;        image = new byte[]{1, 2, 3};&#10;        // Create a valid RegularUser&#10;        regularUser = new RegularUserFactory().createRegularUser(&#10;                &quot;Test User&quot;,&#10;                &quot;test@example.com&quot;,&#10;                &quot;password123!&quot;,&#10;                LocalDateTime.now(),&#10;                4.5,&#10;                &quot;Test bio&quot;,&#10;                LocalDateTime.now()&#10;        );&#10;        // Pass the valid RegularUser to OrderFactory&#10;        order = new OrderFactory().createOrder(LocalDateTime.now(), regularUser);&#10;        book = BookFactory.createBook(&#10;                &quot;9783161484100&quot;,&#10;                &quot;Atomic Habits&quot;,&#10;                &quot;James Clear&quot;,&#10;                &quot;Penguin Random House&quot;,&#10;                BookCondition.ACCEPTABLE,&#10;                19.99,&#10;                &quot;Minor marks in pages but readable&quot;,&#10;                image,&#10;                regularUser&#10;        );&#10;&#10;        quantity = 2;&#10;        totalAmount = 39.98; // Assuming totalAmount is quantity * book price&#10;        orderStatus = OrderStatus.PENDING;&#10;&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactory() {&#10;        // Valid OrderItem creation&#10;        OrderItem orderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, order, orderStatus);&#10;        assertNotNull(orderItem);&#10;        assertEquals(quantity, orderItem.getQuantity());&#10;        assertEquals(totalAmount, orderItem.getTotalAmount());&#10;        assertEquals(book, orderItem.getBook());&#10;        assertEquals(order, orderItem.getOrder());&#10;        assertEquals(orderStatus, orderItem.getOrderStatus());&#10;&#10;        // Invalid cases&#10;        assertNull(OrderItemFactory.createOrderItemFactory(-1, totalAmount, book, order, orderStatus)); // Invalid quantity&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, -1.0, book, order, orderStatus)); // Invalid total amount&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, null, order, orderStatus)); // Null book&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, null, orderStatus)); // Null order&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, order, null)); // Null orderStatus&#10;&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithInvalidData() {&#10;        // Test with invalid quantity&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(-5, totalAmount, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;        // Test with invalid total amount&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, -10.0, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;        // Test with null book&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, null, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;        // Test with null order&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, null, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithZeroQuantity() {&#10;        // Test with zero quantity&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(0, totalAmount, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithZeroTotalAmount() {&#10;        // Test with zero total amount&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, 0.0, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/BookServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/BookServiceTest.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookServiceTest {&#10;&#10;    @Autowired&#10;    private BookService bookService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    private Book book1, book2;&#10;    private ByteArrayOutputStream outputStream;&#10;    private BufferedImage image;&#10;    private byte[] imageBytes;&#10;    private RegularUser user;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;       String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png&quot;;&#10;       // String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png.png&quot;;&#10;&#10;        try {&#10;            image = ImageIO.read(new File(url));&#10;            outputStream = new ByteArrayOutputStream();&#10;            ImageIO.write(image, &quot;png&quot;, outputStream);&#10;            imageBytes = outputStream.toByteArray();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            imageBytes = new byte[]{1, 2, 3}; // fallback dummy image&#10;        }&#10;&#10;        // Ensure no duplicate user by email&#10;        regularUserRepository.findAll().stream()&#10;            .filter(u -&gt; u.getEmail().equals(&quot;test@example.com&quot;))&#10;            .forEach(u -&gt; regularUserRepository.deleteById(u.getId()));&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        bookService.save(book1);&#10;        Optional&lt;Book&gt; found = bookService.findByIsbn(book1.getIsbn());&#10;        assertTrue(found.isPresent());&#10;        assertEquals(book1.getIsbn(), found.get().getIsbn());&#10;        System.out.println(&quot;Found by ISBN: &quot; + found.get());&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByTitleContainingIgnoreCase(&quot;alchemist&quot;);&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getTitle().equalsIgnoreCase(book1.getTitle())));&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void findByAuthor() {&#10;        bookService.save(book2);&#10;        List&lt;Book&gt; found = bookService.findByAuthor(book2.getAuthor());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getAuthor().equals(book2.getAuthor())));&#10;        System.out.println(&quot;Found by author: &quot; + found);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookServiceTest {&#10;&#10;    @Autowired&#10;    private BookService bookService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    private Book book1, book2;&#10;    private ByteArrayOutputStream outputStream;&#10;    private BufferedImage image;&#10;    private byte[] imageBytes;&#10;    private RegularUser user;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;       String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png&quot;;&#10;       // String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png.png&quot;;&#10;&#10;        try {&#10;            image = ImageIO.read(new File(url));&#10;            outputStream = new ByteArrayOutputStream();&#10;            ImageIO.write(image, &quot;png&quot;, outputStream);&#10;            imageBytes = outputStream.toByteArray();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            imageBytes = new byte[]{1, 2, 3}; // fallback dummy image&#10;        }&#10;&#10;        // Ensure no duplicate user by email&#10;        regularUserRepository.findAll().stream()&#10;            .filter(u -&gt; u.getEmail().equals(&quot;test@example.com&quot;))&#10;            .forEach(u -&gt; {&#10;                // Delete all books for this user first&#10;                bookService.getAll().stream()&#10;                    .filter(b -&gt; b.getUser().getId().equals(u.getId()))&#10;                    .forEach(b -&gt; bookService.deleteById(b.getBookID()));&#10;                // Now delete the user&#10;                regularUserRepository.deleteById(u.getId());&#10;            });&#10;&#10;        user = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test Seller&quot;)&#10;                .setEmail(&quot;test@example.com&quot;)&#10;                .setPassword(&quot;test123&quot;)&#10;                .build();&#10;        user = regularUserRepository.save(user);&#10;&#10;        book1 = BookFactory.createBook(&#10;                &quot;9780061122415&quot;,&#10;                &quot;The Alchemist&quot;,&#10;                &quot;Paulo Coelho&quot;,&#10;                &quot;HarperOne&quot;,&#10;                BookCondition.EXCELLENT,&#10;                180.0,&#10;                &quot;Fiction classic about destiny.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;        book2 = BookFactory.createBook(&#10;                &quot;9780451524935&quot;,&#10;                &quot;1984&quot;,&#10;                &quot;George Orwell&quot;,&#10;                &quot;Secker &amp; Warburg&quot;,&#10;                BookCondition.ACCEPTABLE,&#10;                150.0,&#10;                &quot;Dystopian novel set in totalitarian regime.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;//         System.out.println(&quot;Book 1: &quot; + book1);&#10;//         System.out.println(&quot;Book 2: &quot; + book2);&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void save() {&#10;        Book saved1 = bookService.save(book1);&#10;        Book saved2 = bookService.save(book2);&#10;&#10;        assertNotNull(saved1);&#10;        assertNotNull(saved2);&#10;        System.out.println(&quot;Saved: &quot; + saved1);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void findById() {&#10;        Book saved = bookService.save(book1);&#10;        Book found = bookService.findById(saved.getBookID());&#10;&#10;        assertNotNull(found);&#10;        assertEquals(saved.getBookID(), found.getBookID());&#10;        System.out.println(&quot;Found: &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void update() {&#10;        Book saved = bookService.save(book1);&#10;        Book updated = new Book.Builder().copy(saved)&#10;                .setPrice(199.99)&#10;                .build();&#10;        Book result = bookService.update(updated);&#10;&#10;        assertNotNull(result);&#10;        assertEquals(199.99, result.getPrice());&#10;        System.out.println(&quot;Updated: &quot; + result);&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void deleteById() {&#10;        Book saved = bookService.save(book2);&#10;        bookService.deleteById(saved.getBookID());&#10;&#10;        Book deleted = bookService.findById(saved.getBookID());&#10;        assertNull(deleted);&#10;        System.out.println(&quot;Deleted book with ID: &quot; + saved.getBookID());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void getAll() {&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;&#10;        assertFalse(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books: &quot; + bookService.getAll());&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void deleteAll() {&#10;        // Clean up dependent order items first to avoid foreign key constraint errors&#10;        orderItemRepository.deleteAll();&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;        bookService.deleteAll();&#10;&#10;        assertTrue(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books deleted&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByIsbn(book1.getIsbn());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getIsbn().equals(book1.getIsbn())));&#10;        System.out.println(&quot;Found by ISBN: &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByTitleContainingIgnoreCase(&quot;alchemist&quot;);&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getTitle().equalsIgnoreCase(book1.getTitle())));&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void findByAuthor() {&#10;        bookService.save(book2);&#10;        List&lt;Book&gt; found = bookService.findByAuthor(book2.getAuthor());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getAuthor().equals(book2.getAuthor())));&#10;        System.out.println(&quot;Found by author: &quot; + found);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/OrderItemServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/OrderItemServiceTest.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.domain.enums.OrderStatus;&#10;import com.booklify.repository.BookRepository;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderItemServiceTest {&#10;&#10;    @Autowired&#10;    private OrderItemService orderItemService;&#10;&#10;    @Autowired&#10;    private BookRepository bookRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;    &#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    private OrderItem orderItem;&#10;    private Order order;&#10;    private Book book;&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        // Create and save a book for the order item&#10;        book = new Book.Builder()&#10;                .setTitle(&quot;Test Book&quot;)&#10;                .setAuthor(&quot;Test Author&quot;)&#10;                .setPrice(19.99)&#10;                .setCondition(BookCondition.EXCELLENT)&#10;                .setUploadedDate(LocalDateTime.now())&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;&#10;&#10;        // Create and save a book for the order item&#10;        book = new Book.Builder()&#10;                .setTitle(&quot;Test Book&quot;)&#10;                .setAuthor(&quot;Test Author&quot;)&#10;                .setPrice(19.99)&#10;                .setCondition(BookCondition.EXCELLENT)&#10;                .setUploadedDate(LocalDateTime.now())&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;&#10;        OrderItem savedOrderItem = orderItemService.save(newOrderItem);&#10;        assertNotNull(savedOrderItem.getOrderItemId(), &quot;Saved Order Item ID should not be null&quot;);&#10;        assertEquals(3, savedOrderItem.getQuantity(), &quot;Saved Order Item quantity should match&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(2)&#10;    void findById() {&#10;        // Ensure the order item is saved before finding it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by ID&quot;);&#10;&#10;        // Find the order item by ID&#10;        OrderItem foundOrderItem = orderItemService.findById(orderItem.getOrderItemId());&#10;        assertNotNull(foundOrderItem, &quot;Found Order Item should not be null&quot;);&#10;        assertEquals(orderItem.getOrderItemId(), foundOrderItem.getOrderItemId(), &quot;Found Order Item ID should match the original Order Item ID&quot;);&#10;        assertEquals(orderItem.getQuantity(), foundOrderItem.getQuantity(), &quot;Found Order Item quantity should match the original Order Item quantity&quot;);&#10;        assertEquals(orderItem.getBook().getBookID(), foundOrderItem.getBook().getBookID(), &quot;Found Order Item book ID should match the original Book ID&quot;);&#10;        assertEquals(orderItem.getOrder().getOrderId(), foundOrderItem.getOrder().getOrderId(), &quot;Found Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(3)&#10;    void update() {&#10;        // Ensure the order item is saved before updating it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before updating&quot;);&#10;&#10;        // Update the order item's quantity&#10;        OrderItem updatedOrderItem = new OrderItem.OrderItemBuilder()&#10;                .copy(orderItem)&#10;                .setQuantity(5) // Update to a new quantity&#10;                .build();&#10;&#10;        // Update the order item using the service&#10;        OrderItem savedUpdatedOrderItem = orderItemService.update(updatedOrderItem);&#10;        assertNotNull(savedUpdatedOrderItem, &quot;Updated Order Item should not be null&quot;);&#10;        assertEquals(5, savedUpdatedOrderItem.getQuantity(), &quot;Updated Order Item quantity should match the new quantity&quot;);&#10;        assertEquals(orderItem.getOrderItemId(), savedUpdatedOrderItem.getOrderItemId(), &quot;Updated Order Item ID should match the original Order Item ID&quot;);&#10;        assertEquals(orderItem.getBook().getBookID(), savedUpdatedOrderItem.getBook().getBookID(), &quot;Updated Order Item book ID should match the original Book ID&quot;);&#10;        assertEquals(orderItem.getOrder().getOrderId(), savedUpdatedOrderItem.getOrder().getOrderId(), &quot;Updated Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(4)&#10;    void findByOrderStatus() {&#10;        // Ensure the order item is saved before finding by order status&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by order status&quot;);&#10;&#10;        // Find order items by order status&#10;        var foundOrderItems = orderItemService.findByOrderStatus(orderItem.getOrderStatus());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(orderItem.getOrderStatus(), foundOrderItems.get(0).getOrderStatus(), &quot;Found Order Item status should match the original Order Item status&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(5)&#10;    void findByOrderId() {&#10;        // Ensure the order item is saved before finding by order ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by order ID&quot;);&#10;&#10;        // Find order items by order ID&#10;        var foundOrderItems = orderItemService.findByOrderId(order.getOrderId());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(order.getOrderId(), foundOrderItems.get(0).getOrder().getOrderId(), &quot;Found Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(6)&#10;    void findByBookId() {&#10;        // Ensure the order item is saved before finding by book ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by book ID&quot;);&#10;&#10;        // Find order items by book ID&#10;        var foundOrderItems = orderItemService.findByBookId(book.getBookID());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(book.getBookID(), foundOrderItems.get(0).getBook().getBookID(), &quot;Found Order Item book ID should match the original Book ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(7)&#10;    void findByRegularUserId() {&#10;        // Ensure the order item is saved before finding by regular user ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by regular user ID&quot;);&#10;&#10;        // Find order items by regular user ID&#10;        var foundOrderItems = orderItemService.findByRegularUserId(order.getRegularUser().getId());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(order.getRegularUser().getId(), foundOrderItems.get(0).getOrder().getRegularUser().getId(),&#10;                &quot;Found Order Item regular user ID should match the original Regular User ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(8)&#10;    void findAll() {&#10;        // Ensure the order item is saved before finding all&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding all&quot;);&#10;&#10;        // Find all order items&#10;        var foundOrderItems = orderItemService.findAll();&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(9)&#10;    void deleteById() {&#10;        // Ensure the order item is saved before deleting it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before deleting by ID&quot;);&#10;&#10;        // Delete the order item by ID&#10;        boolean isDeleted = orderItemService.deleteById(orderItem.getOrderItemId());&#10;        assertTrue(isDeleted, &quot;Order Item should be deleted successfully&quot;);&#10;&#10;        // Verify that the order item no longer exists&#10;        assertThrows(RuntimeException.class, () -&gt; orderItemService.findById(orderItem.getOrderItemId()),&#10;                &quot;Finding deleted Order Item by ID should throw an exception&quot;);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.OrderItem;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.domain.enums.OrderStatus;&#10;import com.booklify.repository.BookRepository;&#10;import com.booklify.repository.OrderRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderItemServiceTest {&#10;&#10;    @Autowired&#10;    private OrderItemService orderItemService;&#10;&#10;    @Autowired&#10;    private BookRepository bookRepository;&#10;&#10;    @Autowired&#10;    private OrderRepository orderRepository;&#10;    &#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    private OrderItem orderItem;&#10;    private Order order;&#10;    private Book book;&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        // Create and save a regular user for the order&#10;        String randomEmail = &quot;testUser_&quot; + UUID.randomUUID() + &quot;@gmail.com&quot;;&#10;        regularUser = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test User&quot;)&#10;                .setEmail(randomEmail)&#10;                .setPassword(&quot;password&quot;)&#10;                .setDateJoined(LocalDateTime.now())&#10;                .build();&#10;        regularUser = regularUserRepository.save(regularUser);&#10;        assertNotNull(regularUser.getId(), &quot;User ID should not be null after saving&quot;);&#10;&#10;        // Create and save a book for the order item, and set the user&#10;        book = new Book.Builder()&#10;                .setTitle(&quot;Test Book&quot;)&#10;                .setAuthor(&quot;Test Author&quot;)&#10;                .setPrice(19.99)&#10;                .setCondition(BookCondition.EXCELLENT)&#10;                .setUploadedDate(LocalDateTime.now())&#10;                .setUser(regularUser)&#10;                .build();&#10;        book = bookRepository.save(book);&#10;        assertNotNull(book.getBookID(), &quot;Book ID should not be null after saving&quot;);&#10;        &#10;        // Create and save an order for the order item&#10;        order = new Order.OrderBuilder()&#10;                .setOrderDate(LocalDateTime.now())&#10;                .setRegularUser(regularUser)&#10;                .build();&#10;        order = orderRepository.save(order);&#10;        assertNotNull(order.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Create and save an order item&#10;        orderItem = new OrderItem.OrderItemBuilder()&#10;                .setBook(book)&#10;                .setOrder(order)&#10;                .setQuantity(2)&#10;                .setOrderStatus(OrderStatus.PENDING)&#10;                .build();&#10;        orderItem = orderItemService.save(orderItem);&#10;        assertNotNull(orderItem.getOrderItemId(), &quot;Order Item ID should not be null after saving&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(1)&#10;    void save() {&#10;        // Create a new order item with the initialized book and order&#10;        OrderItem newOrderItem = new OrderItem.OrderItemBuilder()&#10;                .setBook(book)&#10;                .setOrder(order)&#10;                .setQuantity(3)&#10;                .setOrderStatus(OrderStatus.PENDING)&#10;                .build();&#10;&#10;        // Save the order item using the service&#10;        OrderItem savedOrderItem = orderItemService.save(newOrderItem);&#10;        assertNotNull(savedOrderItem.getOrderItemId(), &quot;Saved Order Item ID should not be null&quot;);&#10;        assertEquals(3, savedOrderItem.getQuantity(), &quot;Saved Order Item quantity should match&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(2)&#10;    void findById() {&#10;        // Ensure the order item is saved before finding it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by ID&quot;);&#10;&#10;        // Find the order item by ID&#10;        OrderItem foundOrderItem = orderItemService.findById(orderItem.getOrderItemId());&#10;        assertNotNull(foundOrderItem, &quot;Found Order Item should not be null&quot;);&#10;        assertEquals(orderItem.getOrderItemId(), foundOrderItem.getOrderItemId(), &quot;Found Order Item ID should match the original Order Item ID&quot;);&#10;        assertEquals(orderItem.getQuantity(), foundOrderItem.getQuantity(), &quot;Found Order Item quantity should match the original Order Item quantity&quot;);&#10;        assertEquals(orderItem.getBook().getBookID(), foundOrderItem.getBook().getBookID(), &quot;Found Order Item book ID should match the original Book ID&quot;);&#10;        assertEquals(orderItem.getOrder().getOrderId(), foundOrderItem.getOrder().getOrderId(), &quot;Found Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(3)&#10;    void update() {&#10;        // Ensure the order item is saved before updating it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before updating&quot;);&#10;&#10;        // Update the order item's quantity&#10;        OrderItem updatedOrderItem = new OrderItem.OrderItemBuilder()&#10;                .copy(orderItem)&#10;                .setQuantity(5) // Update to a new quantity&#10;                .build();&#10;&#10;        // Update the order item using the service&#10;        OrderItem savedUpdatedOrderItem = orderItemService.update(updatedOrderItem);&#10;        assertNotNull(savedUpdatedOrderItem, &quot;Updated Order Item should not be null&quot;);&#10;        assertEquals(5, savedUpdatedOrderItem.getQuantity(), &quot;Updated Order Item quantity should match the new quantity&quot;);&#10;        assertEquals(orderItem.getOrderItemId(), savedUpdatedOrderItem.getOrderItemId(), &quot;Updated Order Item ID should match the original Order Item ID&quot;);&#10;        assertEquals(orderItem.getBook().getBookID(), savedUpdatedOrderItem.getBook().getBookID(), &quot;Updated Order Item book ID should match the original Book ID&quot;);&#10;        assertEquals(orderItem.getOrder().getOrderId(), savedUpdatedOrderItem.getOrder().getOrderId(), &quot;Updated Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(4)&#10;    void findByOrderStatus() {&#10;        // Ensure the order item is saved before finding by order status&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by order status&quot;);&#10;&#10;        // Find order items by order status&#10;        var foundOrderItems = orderItemService.findByOrderStatus(orderItem.getOrderStatus());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(orderItem.getOrderStatus(), foundOrderItems.get(0).getOrderStatus(), &quot;Found Order Item status should match the original Order Item status&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(5)&#10;    void findByOrderId() {&#10;        // Ensure the order item is saved before finding by order ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by order ID&quot;);&#10;&#10;        // Find order items by order ID&#10;        var foundOrderItems = orderItemService.findByOrderId(order.getOrderId());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(order.getOrderId(), foundOrderItems.get(0).getOrder().getOrderId(), &quot;Found Order Item order ID should match the original Order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(6)&#10;    void findByBookId() {&#10;        // Ensure the order item is saved before finding by book ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by book ID&quot;);&#10;&#10;        // Find order items by book ID&#10;        var foundOrderItems = orderItemService.findByBookId(book.getBookID());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(book.getBookID(), foundOrderItems.get(0).getBook().getBookID(), &quot;Found Order Item book ID should match the original Book ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(7)&#10;    void findByRegularUserId() {&#10;        // Ensure the order item is saved before finding by regular user ID&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding by regular user ID&quot;);&#10;&#10;        // Find order items by regular user ID&#10;        var foundOrderItems = orderItemService.findByRegularUserId(order.getRegularUser().getId());&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;        assertEquals(order.getRegularUser().getId(), foundOrderItems.get(0).getOrder().getRegularUser().getId(),&#10;                &quot;Found Order Item regular user ID should match the original Regular User ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(8)&#10;    void findAll() {&#10;        // Ensure the order item is saved before finding all&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before finding all&quot;);&#10;&#10;        // Find all order items&#10;        var foundOrderItems = orderItemService.findAll();&#10;        assertFalse(foundOrderItems.isEmpty(), &quot;Found Order Items should not be empty&quot;);&#10;        assertTrue(foundOrderItems.stream().anyMatch(item -&gt; item.getOrderItemId().equals(orderItem.getOrderItemId())),&#10;                &quot;Found Order Items should contain the original Order Item&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(9)&#10;    void deleteById() {&#10;        // Ensure the order item is saved before deleting it&#10;        assertNotNull(orderItem, &quot;Order Item should not be null before deleting by ID&quot;);&#10;&#10;        // Delete the order item by ID&#10;        boolean isDeleted = orderItemService.deleteById(orderItem.getOrderItemId());&#10;        assertTrue(isDeleted, &quot;Order Item should be deleted successfully&quot;);&#10;&#10;        // Verify that the order item no longer exists&#10;        assertThrows(RuntimeException.class, () -&gt; orderItemService.findById(orderItem.getOrderItemId()),&#10;                &quot;Finding deleted Order Item by ID should throw an exception&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/OrderServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/OrderServiceTest.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderServiceTest {&#10;&#10;    @Autowired&#10;    private OrderService orderService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    private Order order;&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        // Use a random email to avoid unique constraint violation&#10;        String randomEmail = &quot;testUser2_&quot; + UUID.randomUUID() + &quot;@gmail.com&quot;;&#10;        regularUser = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test User 2&quot;)&#10;                .setEmail(randomEmail)&#10;                .setPassword(&quot;password2&quot;)&#10;                .setDateJoined(LocalDateTime.now())&#10;                .build();&#10;        regularUser = regularUserRepository.save(regularUser);&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;        // Create and save an order for each test&#10;        order = new Order.OrderBuilder()&#10;                .setRegularUser(regularUser)&#10;                .setOrderDate(LocalDateTime.now())&#10;                .build();&#10;&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(1)&#10;    void save() {&#10;        // Create a new order with the initialized regular user&#10;        order = new Order.OrderBuilder()&#10;                .setRegularUser(regularUser)&#10;                .setOrderDate(LocalDateTime.now())&#10;                .build();&#10;&#10;        // Save the order using the service&#10;        Order savedOrder = orderService.save(order);&#10;&#10;        // Validate that the saved order is not null and has an ID&#10;        assertNotNull(savedOrder, &quot;Saved order should not be null&quot;);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Saved order ID should not be null&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(2)&#10;    void findById() {&#10;        // Save the order first to ensure it has an ID&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Find the order by ID&#10;        Order foundOrder = orderService.findById(savedOrder.getOrderId());&#10;&#10;        // Validate that the found order matches the original order&#10;        assertNotNull(foundOrder, &quot;Found order should not be null&quot;);&#10;        assertEquals(savedOrder.getOrderId(), foundOrder.getOrderId(), &quot;Found order ID should match the saved order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(3)&#10;    void update() {&#10;        // Save the order first to ensure it has an ID&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Update the order's order date&#10;        Order updatedOrder = new Order.OrderBuilder()&#10;                .copy(savedOrder)&#10;                .setOrderDate(LocalDateTime.now().plusDays(1)) // Update to a new date&#10;                .build();&#10;&#10;        // Update the order using the service&#10;        Order savedUpdatedOrder = orderService.update(updatedOrder);&#10;&#10;        // Validate that the updated order is not null and has the new order date&#10;        assertNotNull(savedUpdatedOrder, &quot;Updated order should not be null&quot;);&#10;        assertEquals(updatedOrder.getOrderDate(), savedUpdatedOrder.getOrderDate(),&#10;                     &quot;Updated order date should match the new date&quot;);&#10;        assertEquals(savedOrder.getOrderId(), savedUpdatedOrder.getOrderId(),&#10;                     &quot;Updated order ID should match the original order ID&quot;);&#10;        assertEquals(savedOrder.getRegularUser().getId(), savedUpdatedOrder.getRegularUser().getId(),&#10;                     &quot;Updated order's regular user ID should match the original regular user ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(4)&#10;    void getAll() {&#10;        // Save the order first to ensure it is persisted&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Retrieve all orders&#10;        var orders = orderService.getAll();&#10;&#10;        // Validate that the list of orders is not null and contains the saved order&#10;        assertNotNull(orders, &quot;Orders list should not be null&quot;);&#10;        assertFalse(orders.isEmpty(), &quot;Orders list should not be empty&quot;);&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(savedOrder.getOrderId())),&#10;                   &quot;Orders list should contain the saved order&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(5)&#10;    void findByRegularUserId() {&#10;        // Ensure the regular user is saved before finding orders by user ID&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null before finding orders&quot;);&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        // Ensure the order is saved before finding by order date&#10;        assertNotNull(order, &quot;Order should not be null before finding by order date&quot;);&#10;        var orders = orderService.findByOrderDate(order.getOrderDate());&#10;        var orders = orderService.findByOrderDate(order.getOrderDate());&#10;        var orders = orderService.findByOrderDate(order.getOrderDate());&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        // Ensure the order is saved before deleting it&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(order.getOrderId())),&#10;        // Ensure the order is saved before deleting it&#10;        assertNotNull(order, &quot;Order should not be null before deletion&quot;);&#10;        // Ensure the order is saved before deleting it&#10;        assertNotNull(order, &quot;Order should not be null before deletion&quot;);&#10;        // Ensure the order is saved before deleting it&#10;        assertNotNull(order, &quot;Order should not be null before deletion&quot;);&#10;        // Ensure the order is saved before deleting it&#10;        assertNotNull(order, &quot;Order should not be null before deletion&quot;);&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Order;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;@TestInstance(TestInstance.Lifecycle.PER_CLASS)&#10;class OrderServiceTest {&#10;&#10;    @Autowired&#10;    private OrderService orderService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    private Order order;&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;        // Use a random email to avoid unique constraint violation&#10;        String randomEmail = &quot;testUser2_&quot; + UUID.randomUUID() + &quot;@gmail.com&quot;;&#10;        regularUser = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test User 2&quot;)&#10;                .setEmail(randomEmail)&#10;                .setPassword(&quot;password2&quot;)&#10;                .setDateJoined(LocalDateTime.now())&#10;                .build();&#10;        regularUser = regularUserRepository.save(regularUser);&#10;        assertNotNull(regularUser.getId(), &quot;Regular User ID should not be null after saving&quot;);&#10;        // Create and save an order for each test&#10;        order = new Order.OrderBuilder()&#10;                .setRegularUser(regularUser)&#10;                .setOrderDate(LocalDateTime.now())&#10;                .build();&#10;&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(1)&#10;    void save() {&#10;        // Create a new order with the initialized regular user&#10;        order = new Order.OrderBuilder()&#10;                .setRegularUser(regularUser)&#10;                .setOrderDate(LocalDateTime.now())&#10;                .build();&#10;&#10;        // Save the order using the service&#10;        Order savedOrder = orderService.save(order);&#10;&#10;        // Validate that the saved order is not null and has an ID&#10;        assertNotNull(savedOrder, &quot;Saved order should not be null&quot;);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Saved order ID should not be null&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(2)&#10;    void findById() {&#10;        // Save the order first to ensure it has an ID&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Find the order by ID&#10;        Order foundOrder = orderService.findById(savedOrder.getOrderId());&#10;&#10;        // Validate that the found order matches the original order&#10;        assertNotNull(foundOrder, &quot;Found order should not be null&quot;);&#10;        assertEquals(savedOrder.getOrderId(), foundOrder.getOrderId(), &quot;Found order ID should match the saved order ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(3)&#10;    void update() {&#10;        // Save the order first to ensure it has an ID&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Update the order's order date&#10;        Order updatedOrder = new Order.OrderBuilder()&#10;                .copy(savedOrder)&#10;                .setOrderDate(LocalDateTime.now().plusDays(1)) // Update to a new date&#10;                .build();&#10;&#10;        // Update the order using the service&#10;        Order savedUpdatedOrder = orderService.update(updatedOrder);&#10;&#10;        // Validate that the updated order is not null and has the new order date&#10;        assertNotNull(savedUpdatedOrder, &quot;Updated order should not be null&quot;);&#10;        assertEquals(updatedOrder.getOrderDate(), savedUpdatedOrder.getOrderDate(),&#10;                     &quot;Updated order date should match the new date&quot;);&#10;        assertEquals(savedOrder.getOrderId(), savedUpdatedOrder.getOrderId(),&#10;                     &quot;Updated order ID should match the original order ID&quot;);&#10;        assertEquals(savedOrder.getRegularUser().getId(), savedUpdatedOrder.getRegularUser().getId(),&#10;                     &quot;Updated order's regular user ID should match the original regular user ID&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(4)&#10;    void getAll() {&#10;        // Save the order first to ensure it is persisted&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Retrieve all orders&#10;        var orders = orderService.getAll();&#10;&#10;        // Validate that the list of orders is not null and contains the saved order&#10;        assertNotNull(orders, &quot;Orders list should not be null&quot;);&#10;        assertFalse(orders.isEmpty(), &quot;Orders list should not be empty&quot;);&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(savedOrder.getOrderId())),&#10;                   &quot;Orders list should contain the saved order&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(5)&#10;    void findByRegularUserId() {&#10;        // Save the order first to ensure it is persisted&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Find orders by regular user ID&#10;        var orders = orderService.findByRegularUserId(regularUser.getId());&#10;&#10;        // Validate that the list of orders is not null and contains the saved order&#10;        assertNotNull(orders, &quot;Orders list should not be null&quot;);&#10;        assertFalse(orders.isEmpty(), &quot;Orders list should not be empty&quot;);&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(savedOrder.getOrderId())),&#10;                   &quot;Orders list should contain the saved order for the regular user&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(6)&#10;    void findByOrderDate() {&#10;        // Save the order first to ensure it is persisted&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Find orders by order date&#10;        var orders = orderService.findByOrderDate(savedOrder.getOrderDate());&#10;&#10;        // Validate that the list of orders is not null and contains the saved order&#10;        assertNotNull(orders, &quot;Orders list should not be null&quot;);&#10;        assertFalse(orders.isEmpty(), &quot;Orders list should not be empty&quot;);&#10;        assertTrue(orders.stream().anyMatch(o -&gt; o.getOrderId().equals(savedOrder.getOrderId())),&#10;                   &quot;Orders list should contain the saved order for the specified order date&quot;);&#10;    }&#10;&#10;    @Test&#10;    @org.junit.jupiter.api.Order(7)&#10;    void deleteById() {&#10;        // Save the order first to ensure it is persisted&#10;        Order savedOrder = orderService.save(order);&#10;        assertNotNull(savedOrder.getOrderId(), &quot;Order ID should not be null after saving&quot;);&#10;&#10;        // Delete the order by ID&#10;        boolean isDeleted = orderService.deleteById(savedOrder.getOrderId());&#10;&#10;        // Validate that the order was deleted successfully&#10;        assertTrue(isDeleted, &quot;Order should be deleted successfully&quot;);&#10;&#10;        // Attempt to find the deleted order by ID&#10;        assertThrows(RuntimeException.class, () -&gt; orderService.findById(savedOrder.getOrderId()),&#10;                     &quot;Finding a deleted order should throw an exception&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>